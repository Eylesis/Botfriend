import discord
from math import exp
from discord.ext import commands

class DMGold():
    def __init__(self, bot):
        self.bot = bot
    
    @commands.command(pass_context=True)
    async def dmgold(self, ctx, multiplier : int, charLevels : str, override : bool = False):
        # check if multiplier is out of range
        if multiplier < 130 or multiplier > 175 and not override:
            return self.bot.say(
        "Apologies {}, but it would appear you have attempted to give your players a gold reward outside of the accepted range. If this was not a mistake, simply add 'True' to the end of your command!".format(ctx.message.author.mention))
        
        # parse charLevels into a list
        # -If can't make list, return error
        try:
            lvlList = charLevels.split(',')
        except:
            return self.bot.say("Apologies {}, but I was unable to decide what the character levels were. Please format the character levels with commas between each number, like so: `4,10,16,20`".format(ctx.message.author.mention))
        print(lvlList)
        
        # calculate gold per character
        goldTotals = []
        
        for character in lvlList:
            if character <= 4:
                prof = 2
            else if character <= 8:
                prof = 3
            else if character <= 12:
                prof = 4
            else if character <= 16:
                prof = 5
            else:
                prof = 6
            goldTotals.append(round((multiplier * exp(0.44 * character) / (prof+1))[,2]))
        print(goldTotals)

        # average gold into total
        totalGold  = sum(goldTotals)
        individualGold = totaldGold / len(goldTotals)
        # Build embed
        embed = discord.Embed(title="Gold Rewards", description="Gold has been calculated as per the formula `GP = (130-175)e^(0.44 * Level) / (Prof+1)`")
        embed.set_footer(text="Gold Generated by: {}".format(ctx.message.author.display_name), icon_url=ctx.message.author.avatar_url)
        
        embed.add_field(name="Total Gold", value="{}gp".format(totalGold))
        embed.add_field(name="Individual Gold", value="{}gp".format(individualGold))
        # Return embed      
        return await self.bot.say(embed=embed)

def setup(bot):
    bot.add_cog(DMGold(bot))

    #(130-175)e^(0.44 * Level) / (Prof+1)